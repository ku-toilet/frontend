import {
  GoogleLogin,
  googleLogout,
  GoogleOAuthProvider
} from "@react-oauth/google"
import { Icon } from "leaflet"
import "leaflet/dist/leaflet.css"
import { useEffect, useRef, useState } from "react"
import { MapContainer, Marker, Popup, TileLayer, useMap } from "react-leaflet"
import MarkerClusterGroup from "react-leaflet-cluster"
import Slider from "react-slick"
import "slick-carousel/slick/slick-theme.css"
import "slick-carousel/slick/slick.css"
import "./App.css"

const API_URL = "http://localhost:3001"

const formatDate = (dateString) => {
  if (!dateString) return "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà";

  try {
    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ISO date (YYYY-MM-DD)
    if (typeof dateString === "string" && dateString.includes("-")) {
      const date = new Date(dateString);
      if (isNaN(date.getTime())) return "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà";

      // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY
      return new Intl.DateTimeFormat("th-TH", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
      }).format(date);
    }

    // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô Date object
    if (dateString instanceof Date) {
      return new Intl.DateTimeFormat("th-TH", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
      }).format(dateString);
    }

    return dateString;
  } catch (error) {
    console.error("‚ùå Error formatting date:", error);
    return "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà";
  }
};

Icon.Default.mergeOptions({
  iconRetinaUrl: require("leaflet/dist/images/marker-icon-2x.png"),
  iconUrl: require("leaflet/dist/images/marker-icon.png"),
  shadowUrl: require("leaflet/dist/images/marker-shadow.png")
})

const customIcon = new Icon({
  iconUrl: require("./img/location.png"),
  iconSize: [38, 38]
})

const GPSMarker = ({ setUserPosition }) => {
  const [position, setPosition] = useState(null)
  const map = useMap()

  useEffect(() => {
    map.locate({ setView: true, maxZoom: 16, watch: true })
    map.on("locationfound", (e) => {
      setPosition(e.latlng)
      setUserPosition(e.latlng) // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    })
    map.on("locationerror", (e) => console.error("Location error:", e.message))
  }, [map, setUserPosition])

  const userIcon = new Icon({
    iconUrl: require("./img/location-me.png"),
    iconSize: [30, 30]
  })

  return position ? (
    <Marker
      position={position}
      icon={userIcon}
    >
      <Popup>‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà</Popup>
    </Marker>
  ) : null
}

const ReCenterButton = ({ position }) => {
  const map = useMap()

  const handleRecenter = () => {
    if (position) {
      map.setView(position, 18, { animate: true }) // ‚úÖ ‡∏ã‡∏π‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      map.invalidateSize() // ‚úÖ ‡πÅ‡∏Å‡πâ‡∏ö‡∏±‡πä‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
    } else {
      alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    }
  }

  return (
    <button
      onClick={handleRecenter}
      style={{
        position: "absolute",
        bottom: "20px",
        right: "20px",
        width: "50px",
        height: "50px",
        borderRadius: "50%",
        border: "none",
        backgroundColor: "white",
        boxShadow: "0px 4px 10px rgba(0,0,0,0.3)",
        cursor: "pointer"
      }}
    >
      üìç
    </button>
  )
}

function HeaderBar({
  onFilterClick,
  onProfileClick,
  onSearchChange,
  isLoggedIn
}) {
  return (
    <header
      style={{
        display: "flex",
        justifyContent: "space-between",
        alignItems: "center",
        padding: "10px 20px",
        backgroundColor: "#006642",
        color: "white",
        position: "fixed",
        top: 0,
        width: "100%",
        zIndex: 1000
      }}
    >
      <div style={{ display: "flex", alignItems: "center" }}>
        <img
          src={require("./img/logo.png")}
          alt="Logo"
          style={{ height: "40px" }}
        />
        {isLoggedIn && (
          <span style={{ marginLeft: "10px", fontSize: "12px", color: "#eee" }}>
            ‚óè
          </span>
        )}
      </div>
      <input
        type="text"
        placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà..."
        onChange={(e) => onSearchChange(e.target.value)}
        style={{
          flex: 1,
          margin: "0 10px",
          padding: "5px 10px",
          borderRadius: "5px",
          border: "none",
          color: "black"
        }}
      />
      <button
        onClick={onFilterClick}
        style={{
          padding: "5px 15px",
          border: "none",
          borderRadius: "5px",
          backgroundColor: "white",
          color: "#006642"
        }}
      >
        Filter
      </button>
      <img
        src={require("./img/profile.png")}
        alt="Profile"
        style={{
          height: "40px",
          marginLeft: "10px",
          borderRadius: "50%",
          cursor: "pointer",
          border: isLoggedIn ? "2px solid #8effb5" : "none" // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏≠‡∏ö‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß
        }}
        onClick={onProfileClick}
      />
    </header>
  )
}

function LoginPage({ onClose, onRegisterClick, onLogin }) {
  const [user, setUser] = useState(null)

  useEffect(() => {
    const storedUser = localStorage.getItem("user")
    if (storedUser) {
      setUser(JSON.parse(storedUser))
      onLogin(JSON.parse(storedUser).name) // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    }
  }, [])

  const handleSuccess = (credentialResponse) => {
    console.log("üîπ Google Login Success:", credentialResponse)

    fetch("http://localhost:3001/auth/google", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ token: credentialResponse.credential })
    })
      .then((response) => response.json())
      .then((data) => {
        console.log("üîπ Server Response:", data) // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤

        if (data.user) {
          setUser(data.user)
          localStorage.setItem("user", JSON.stringify(data.user))
          onLogin(data.user.name) // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        } else {
          alert("Login failed!")
        }
      })
      .catch((error) => console.error("üî¥ Google Auth Error:", error))
  }

  const handleFailure = () => {
    alert("Google login failed. Please try again.")
  }

  return (
    <GoogleOAuthProvider clientId="577202715001-pa9pfkmbm44haiocpbpg4ran1rn4f824.apps.googleusercontent.com">
      <div
        style={{
          padding: "20px",
          maxWidth: "400px",
          margin: "100px auto",
          backgroundColor: "white",
          borderRadius: "10px",
          boxShadow: "0 2px 10px rgba(0, 0, 0, 0.1)",
          textAlign: "center"
        }}
      >
        <h3 style={{ fontSize: 24, fontWeight: "bold", marginBottom: "16px" }}>
          Login
        </h3>

        {!user ? (
          <div
            style={{
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              marginTop: "20px"
            }}
          >
            <GoogleLogin
              onSuccess={handleSuccess}
              onError={handleFailure}
              size="large"
              width="250"
            />
          </div>
        ) : (
          <div style={{ marginTop: "20px" }}>
            <h3>Logged in as:</h3>
            <p>{user.name}</p>
            <p>Email: {user.email}</p>
            <button
              onClick={() => {
                googleLogout()
                setUser(null)
                localStorage.removeItem("user")
              }}
              style={{
                padding: "10px 20px",
                marginTop: "10px",
                cursor: "pointer",
                backgroundColor: "#d9534f",
                color: "white",
                border: "none",
                borderRadius: "5px"
              }}
            >
              Logout
            </button>
          </div>
        )}
      </div>
    </GoogleOAuthProvider>
  )
}

function SignUpPage({ onClose, onLoginClick }) {
  return (
    <div
      style={{
        padding: "20px",
        maxWidth: "400px",
        margin: "100px auto",
        backgroundColor: "white",
        borderRadius: "10px",
        boxShadow: "0 2px 10px rgba(0, 0, 0, 0.1)",
        textAlign: "center"
      }}
    >
      <h3 style={{ fontSize: 24, fontWeight: "bold", marginBottom: "16px" }}>
        Sign Up
      </h3>
      <input
        type="text"
        placeholder="Username"
        style={{
          padding: "10px",
          width: "100%",
          marginBottom: "15px",
          borderRadius: "5px",
          border: "1px solid #ccc"
        }}
      />
      <input
        type="text"
        placeholder="Name"
        style={{
          padding: "10px",
          width: "100%",
          marginBottom: "15px",
          borderRadius: "5px",
          border: "1px solid #ccc"
        }}
      />
      <input
        type="email"
        placeholder="E-mail"
        style={{
          padding: "10px",
          width: "100%",
          marginBottom: "15px",
          borderRadius: "5px",
          border: "1px solid #ccc"
        }}
      />
      <input
        type="password"
        placeholder="Password"
        style={{
          padding: "10px",
          width: "100%",
          marginBottom: "20px",
          borderRadius: "5px",
          border: "1px solid #ccc"
        }}
      />
      <button
        style={{
          padding: "10px",
          width: "100%",
          backgroundColor: "#006642",
          color: "white",
          border: "none",
          borderRadius: "5px"
        }}
      >
        Register
      </button>
      <div style={{ marginTop: "20px" }}>
        <span>
          Have an account?{" "}
          <a
            href="#"
            onClick={onLoginClick}
            style={{ textDecoration: "underline" }}
          >
            Login
          </a>
        </span>
      </div>
    </div>
  )
}

function FilterPanel({ onClose, filters, setFilters, applyFilters }) {
  const handleClear = () => {
    setFilters({
      women: false,
      men: false,
      accessible: false,
      bidet: false,
      tissue: false,
      free: false
    })
  }

  return (
    <div
      style={{
        position: "fixed",
        top: "60px",
        left: 0,
        width: "100%",
        backgroundColor: "white",
        padding: "20px",
        boxShadow: "0px 2px 10px rgba(0, 0, 0, 0.1)",
        zIndex: 1000
      }}
    >
      <h3 style={{ fontSize: 24, fontWeight: "bold", marginBottom: "16px" }}>
        Filter
      </h3>

      <div
        className="filter-option"
        style={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          marginBottom: "12px"
        }}
      >
        <div style={{ display: "flex", alignItems: "center" }}>
          <img
            src={require("./img/women.png")}
            alt="Women Icon"
            style={{ height: "24px", marginRight: "10px" }}
          />
          <label>Women</label>
        </div>
        <input
          type="checkbox"
          checked={filters.women}
          onChange={() =>
            setFilters((prev) => ({ ...prev, women: !prev.women }))
          }
          style={{ transform: "scale(1.5)" }}
        />
      </div>

      <div
        className="filter-option"
        style={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          marginBottom: "12px"
        }}
      >
        <div style={{ display: "flex", alignItems: "center" }}>
          <img
            src={require("./img/men.png")}
            alt="Men Icon"
            style={{ height: "24px", marginRight: "10px" }}
          />
          <label>Men</label>
        </div>
        <input
          type="checkbox"
          checked={filters.men}
          onChange={() => setFilters((prev) => ({ ...prev, men: !prev.men }))}
          style={{ transform: "scale(1.5)" }}
        />
      </div>

      <div
        className="filter-option"
        style={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          marginBottom: "12px"
        }}
      >
        <div style={{ display: "flex", alignItems: "center" }}>
          <img
            src={require("./img/accessible.png")}
            alt="Accessible Icon"
            style={{ height: "24px", marginRight: "10px" }}
          />
          <label>Accessible</label>
        </div>
        <input
          type="checkbox"
          checked={filters.accessible}
          onChange={() =>
            setFilters((prev) => ({ ...prev, accessible: !prev.accessible }))
          }
          style={{ transform: "scale(1.5)" }}
        />
      </div>

      <div
        className="filter-option"
        style={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          marginBottom: "12px"
        }}
      >
        <div style={{ display: "flex", alignItems: "center" }}>
          <img
            src={require("./img/bidet.png")}
            alt="Bidet Icon"
            style={{ height: "24px", marginRight: "10px" }}
          />
          <label>Bidet Spray</label>
        </div>
        <input
          type="checkbox"
          checked={filters.bidet}
          onChange={() =>
            setFilters((prev) => ({ ...prev, bidet: !prev.bidet }))
          }
          style={{ transform: "scale(1.5)" }}
        />
      </div>

      <div
        className="filter-option"
        style={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          marginBottom: "12px"
        }}
      >
        <div style={{ display: "flex", alignItems: "center" }}>
          <img
            src={require("./img/tissue.png")}
            alt="Tissue Icon"
            style={{ height: "24px", marginRight: "10px" }}
          />
          <label>Tissue Paper</label>
        </div>
        <input
          type="checkbox"
          checked={filters.tissue}
          onChange={() =>
            setFilters((prev) => ({ ...prev, tissue: !prev.tissue }))
          }
          style={{ transform: "scale(1.5)" }}
        />
      </div>

      <div
        className="filter-option"
        style={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          marginBottom: "12px"
        }}
      >
        <div style={{ display: "flex", alignItems: "center" }}>
          <img
            src={require("./img/money.png")}
            alt="Free Icon"
            style={{ height: "24px", marginRight: "10px" }}
          />
          <label>Free</label>
        </div>
        <input
          type="checkbox"
          checked={filters.free}
          onChange={() => setFilters((prev) => ({ ...prev, free: !prev.free }))}
          style={{ transform: "scale(1.5)" }}
        />
      </div>

      <div
        style={{
          display: "flex",
          justifyContent: "center",
          gap: "20px",
          marginTop: "20px"
        }}
      >
        <button
          onClick={handleClear}
          style={{
            background: "none",
            border: "1px solid #006642",
            color: "#006642",
            padding: "10px",
            borderRadius: "15px"
          }}
        >
          Clear
        </button>
        <button
          onClick={() => {
            applyFilters()
            onClose() // ‚úÖ ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ Filter ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏î Done
          }}
          style={{
            backgroundColor: "#006642",
            color: "white",
            padding: "10px",
            borderRadius: "15px"
          }}
        >
          Done
        </button>
      </div>
    </div>
  )
}

function BottomSheet({
  data,
  onClose,
  loggedIn,
  setShowLogin,
  username,
  commentsByLocation,
  setCommentsByLocation,
  NO_IMAGE_URL
}) {
  const [rating, setRating] = useState(0)
  const [comment, setComment] = useState("")
  const [showLoginAlert, setShowLoginAlert] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false) // ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å

  // state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  const [selectedImage, setSelectedImage] = useState(null)
  const [imagePreview, setImagePreview] = useState(null)

  // ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á input file
  const fileInputRef = useRef(null)

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏à‡∏≤‡∏Å localStorage
  const [user, setUser] = useState(null)

  useEffect(() => {
    const storedUser = localStorage.getItem("user")
    if (storedUser) {
      try {
        const parsedUser = JSON.parse(storedUser)
        setUser(parsedUser)
      } catch (error) {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:", error)
      }
    }
  }, [])

  if (!data) return null

  const comments = commentsByLocation[data.name] || []
  const features = data.features
  const hours = data.hours

  const settings = {
    dots: true,
    infinite: true,
    speed: 500,
    slidesToShow: 1,
    slidesToScroll: 1,
    arrows: true
  }

  const handleRatingClick = (value) => {
    if (!loggedIn) {
      setShowLoginAlert(true)
      return
    }
    setRating(value)
  }

  const handleImageChange = (e) => {
    if (!loggedIn) {
      setShowLoginAlert(true)
      return
    }

    const file = e.target.files[0]
    if (file) {
      setSelectedImage(file)

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      const previewUrl = URL.createObjectURL(file)
      setImagePreview(previewUrl)
    }
  }

  const handleImageButtonClick = () => {
    if (!loggedIn) {
      setShowLoginAlert(true)
      return
    }
    fileInputRef.current.click()
  }

  const handleClearImage = () => {
    setSelectedImage(null)
    setImagePreview(null)
    if (fileInputRef.current) {
      fileInputRef.current.value = ""
    }
  }

  const handleCommentSubmit = () => {
    console.log("üîπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô...")
    console.log("üîπ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ", {
      loggedIn,
      username: username || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
      comment,
      rating,
      selectedImage: selectedImage ? "‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û" : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û",
      data: data || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
    })

    if (!loggedIn || !user) {
      console.error("üî¥ User is not logged in!")
      setShowLoginAlert(true)
      return
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (rating === 0) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô")
      return
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (comment.trim() === "") {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
      return
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ data ‡πÅ‡∏•‡∏∞ data.id ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!data || !data.id) {
      console.error("üî¥ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• restroom_id")
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥")
      return
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ user_id ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!user.user_id) {
      console.error("üî¥ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user_id")
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
      return
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ loading
    setIsSubmitting(true)

    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á FormData ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      const formData = new FormData()
      formData.append("restroom_id", data.id)
      formData.append("user_id", user.user_id)
      formData.append("rating", rating)
      formData.append("comment", comment)

      // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î FormData ‡πÉ‡∏ô console
      console.log("üîπ FormData entries:")
      for (let [key, value] of formData.entries()) {
        console.log(`   ${key}: ${value}`)
      }

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
      if (selectedImage) {
        console.log(
          "üîπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:",
          selectedImage.name,
          "‡∏Ç‡∏ô‡∏≤‡∏î:",
          selectedImage.size,
          "bytes"
        )
        formData.append("photo", selectedImage)

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (selectedImage.size > 5 * 1024 * 1024) {
          // 5MB
          alert("‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB")
          setIsSubmitting(false)
          return
        }
      }

      // ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ base64 ‡πÅ‡∏ó‡∏ô‡∏ñ‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      if (selectedImage && window.FileReader) {
        const reader = new FileReader()
        reader.onload = function (e) {
          const base64data = e.target.result
          sendReviewWithBase64(formData, base64data)
        }
        reader.readAsDataURL(selectedImage)
      } else {
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API ‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥
        sendReviewData(formData)
      }
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á FormData:", error)
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
      setIsSubmitting(false)
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö base64
  const sendReviewWithBase64 = (formData, base64Image) => {
    try {
      console.log("üî∂ API_URL:", API_URL)
      console.log(
        "üî∂ Full URL for review submission:",
        `${API_URL}/review/base64`
      )

      // ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ formData ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
      if (
        !formData.get("restroom_id") ||
        !formData.get("user_id") ||
        !formData.get("rating")
      ) {
        throw new Error("Missing required data")
      }

      // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• base64 ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å header (‡πÄ‡∏ä‡πà‡∏ô data:image/jpeg;base64,)
      let base64String = base64Image
      if (base64Image.includes(";base64,")) {
        base64String = base64Image.split(";base64,")[1]
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á
      const reviewData = {
        restroom_id: formData.get("restroom_id"),
        user_id: formData.get("user_id"),
        rating: formData.get("rating"),
        comment: formData.get("comment") || "",
        photo_base64: base64String
      }

      // ‡πÅ‡∏™‡∏î‡∏á log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á
      console.log("üîπ Sending review data:", {
        restroom_id: reviewData.restroom_id,
        user_id: reviewData.user_id,
        rating: reviewData.rating,
        comment: reviewData.comment,
        photo_base64_length: reviewData.photo_base64
          ? reviewData.photo_base64.length
          : 0
      })

      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á endpoint ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô
      console.log("üîπ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á /test-base64 ‡∏Å‡πà‡∏≠‡∏ô...")
      fetch(`${API_URL}/test-base64`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          test: "data",
          timestamp: new Date().toISOString()
        })
      })
        .then((response) => {
          console.log(
            "üîπ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö /test-base64:",
            response.status,
            response.statusText
          )
          if (!response.ok) {
            console.error(
              "‚ö†Ô∏è Test endpoint failed, but continuing with actual request"
            )
          }

          // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API ‡∏à‡∏£‡∏¥‡∏á
          console.log("üîπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á /review/base64...")
          return fetch(`${API_URL}/review/base64`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify(reviewData)
          })
        })
        .then((response) => {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ response
          console.log(
            "üîπ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:",
            response.status,
            response.statusText
          )
          if (!response.ok) {
            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error ‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏Å‡πà‡∏≠‡∏ô
            return response.text().then((text) => {
              console.error("‚ùå Server error response:", text)
              throw new Error(
                `Server responded with status: ${response.status}. ${text}`
              )
            })
          }
          return response.json()
        })
        .then((data) => {
          console.log("‚úÖ Review submission successful:", data)
          // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          handleResponse(data)
        })
        .catch((error) => {
          console.error("‚ùå Error in review submission:", error)

          // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö error
          console.error("Error details:", {
            message: error.message,
            name: error.name,
            stack: error.stack
          })

          // ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á /review/base64 ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô /review ‡πÅ‡∏ó‡∏ô
          console.log("üî∏ ‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô /review ‡πÅ‡∏ó‡∏ô...")

          // ‡∏™‡∏£‡πâ‡∏≤‡∏á FormData ‡πÉ‡∏´‡∏°‡πà
          const alternativeFormData = new FormData()
          alternativeFormData.append("restroom_id", reviewData.restroom_id)
          alternativeFormData.append("user_id", reviewData.user_id)
          alternativeFormData.append("rating", reviewData.rating)
          alternativeFormData.append("comment", reviewData.comment)

          // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û base64 ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡∏ó‡∏≥‡πÑ‡∏î‡πâ)
          if (base64Image && base64Image.includes(";base64,")) {
            try {
              const contentType = base64Image.split(";")[0].split(":")[1]
              const byteCharacters = atob(base64Image.split(",")[1])
              const byteArrays = []

              for (let i = 0; i < byteCharacters.length; i++) {
                byteArrays.push(byteCharacters.charCodeAt(i))
              }

              const byteArray = new Uint8Array(byteArrays)
              const blob = new Blob([byteArray], { type: contentType })
              const file = new File([blob], "review_image.jpg", {
                type: contentType
              })

              alternativeFormData.append("photo", file)
            } catch (e) {
              console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á base64 ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ:", e)
            }
          }

          return fetch(`${API_URL}/review`, {
            method: "POST",
            body: alternativeFormData
          })
            .then((response) => {
              console.log(
                "üîπ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô /review:",
                response.status,
                response.statusText
              )
              if (!response.ok) {
                return response.text().then((text) => {
                  throw new Error(
                    `Alternative endpoint failed: ${response.status}. ${text}`
                  )
                })
              }
              return response.json()
            })
            .then((data) => {
              console.log(
                "‚úÖ Review submission via alternative endpoint successful:",
                data
              )
              handleResponse(data)
            })
            .catch((altError) => {
              console.error("‚ùå Alternative endpoint also failed:", altError)
              // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
              handleError(error) // ‡πÉ‡∏ä‡πâ error ‡πÄ‡∏î‡∏¥‡∏° ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ô‡∏±‡πà‡∏ô‡∏Ñ‡∏∑‡∏≠ error ‡∏´‡∏•‡∏±‡∏Å
            })
        })
    } catch (error) {
      console.error("‚ùå Error preparing review data:", error)
      handleError(error)
    }
  }

  const sendReviewData = (formData) => {
    console.log("üîπ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö FormData")

    fetch(`${API_URL}/review`, {
      method: "POST",
      body: formData
    })
      .then((response) => {
        console.log(
          "üîπ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:",
          response.status,
          response.statusText
        )
        if (!response.ok) {
          return response.text().then((text) => {
            throw new Error(
              `Server responded with status: ${response.status}. ${text}`
            )
          })
        }
        return response.json()
      })
      .then((data) => {
        console.log("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", data)

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏´‡∏°‡πà
        const newComment = {
          username: username,
          text: comment,
          rating: rating,
          date: data.review_date
            ? new Date(data.review_date).toLocaleDateString("th-TH")
            : new Date().toLocaleDateString("th-TH"),
          image: data.photo_url || null
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô
        setCommentsByLocation((prevComments) => ({
          ...prevComments,
          [data.name]: [...(prevComments[data.name] || []), newComment]
        }))

        alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        setComment("")
        setRating(0)
        handleClearImage()
        setIsSubmitting(false)
      })
      .catch(handleError)
  }
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ response
  const handleResponse = (data) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Response object ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (data && typeof data.json === "function") {
      return data.json().then((result) => {
        // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• result ‡∏ï‡πà‡∏≠‡πÑ‡∏õ
      })
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Response object ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏•‡∏¢
      console.log("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", data)

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
      const newComment = {
        username: username,
        text: comment,
        rating: rating,
        date: data.review_date
          ? new Date(data.review_date).toLocaleDateString("th-TH")
          : new Date().toLocaleDateString("th-TH"),
        image: data.photo_url || null
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      setCommentsByLocation((prevComments) => ({
        ...prevComments,
        [data.name]: [...(prevComments[data.name] || []), newComment]
      }))

      alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
      setComment("")
      setRating(0)
      handleClearImage()
      setIsSubmitting(false)
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô handleError ‡πÉ‡∏ô src/App.js
  const handleError = (error) => {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô:", error)

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    let errorMessage =
      "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"

    if (error.message) {
      if (error.message.includes("undefined")) {
        errorMessage =
          "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"
      } else {
        errorMessage = error.message
      }
    }

    alert(errorMessage)
    setIsSubmitting(false)
  }

  const DriveImage = ({ driveId, index, fallbackUrl }) => {
    const [hasError, setHasError] = useState(false)

    // Format Google Drive URL correctly for image embedding
    const formattedUrl = driveId
      ? `https://lh3.googleusercontent.com/d/${driveId}`
      : fallbackUrl

    return (
      <img
        src={hasError ? fallbackUrl : formattedUrl}
        alt={`Image ${index + 1}`}
        style={{
          width: "100%",
          maxWidth: "600px",
          height: "auto",
          maxHeight: "300px",
          objectFit: "contain",
          borderRadius: "10px",
          border: "1px solid #ddd",
          padding: "5px"
        }}
        onError={(e) => {
          console.log("üöÄ ~ DriveImage ~ formattedUrl:", formattedUrl)
          console.error(`‚ùå Error loading image: ${driveId}`)
          setHasError(true)
        }}
      />
    )
  }

  const extractDriveId = (url) => {
    // Handle full Google Drive links
    if (typeof url === "string" && url.includes("drive.google.com")) {
      const idMatch = url.match(/[\/?]d\/([^\/]+)/)
      if (idMatch && idMatch[1]) return idMatch[1]

      const idParam = url.match(/[?&]id=([^&]+)/)
      if (idParam && idParam[1]) return idParam[1]
    }

    // If already an ID or can't extract
    return url
  }

  return (
    <div
      style={{
        position: "fixed",
        bottom: 0,
        left: 0,
        width: "100vw",
        maxHeight: "50vh",
        backgroundColor: "white",
        borderRadius: "20px 20px 0 0",
        boxShadow: "0px -2px 10px rgba(0, 0, 0, 0.1)",
        zIndex: 1000,
        overflowY: "auto",
        padding: "20px"
      }}
    >
      {/* Login Alert Modal */}
      {showLoginAlert && (
        <div
          style={{
            position: "fixed",
            top: "30%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            backgroundColor: "white",
            padding: "20px",
            borderRadius: "15px",
            boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.2)",
            textAlign: "center",
            zIndex: 2000,
            width: "320px",
            border: "2px solid rgba(0, 0, 0, 0.1)"
          }}
        >
          <div style={{ display: "flex", justifyContent: "flex-end" }}>
            <button
              onClick={() => setShowLoginAlert(false)}
              style={{
                background: "none",
                border: "none",
                fontSize: "20px",
                cursor: "pointer"
              }}
            >
              ‚úñ
            </button>
          </div>
          <p style={{ fontSize: "18px", fontWeight: "bold", margin: "10px 0" }}>
            Please Login before review!
          </p>
          <button
            onClick={() => {
              setShowLoginAlert(false)
              setShowLogin(true)
              onClose()
            }}
            style={{
              marginTop: "15px",
              padding: "10px 20px",
              backgroundColor: "#006642",
              color: "white",
              border: "none",
              borderRadius: "20px",
              fontWeight: "bold",
              fontSize: "16px",
              width: "30%"
            }}
          >
            Got it
          </button>
        </div>
      )}

      {/* Close Button */}
      <div
        style={{
          position: "sticky",
          top: "-20px",
          width: "100%",
          backgroundColor: "white",
          display: "flex",
          justifyContent: "center",
          zIndex: 1000,
          marginTop: "-20px"
        }}
      >
        <button
          onClick={onClose}
          style={{
            background: "white",
            border: "none",
            borderRadius: "50%",
            width: "40px",
            height: "40px",
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            fontSize: "24px",
            cursor: "pointer"
          }}
        >
          ‚ñº
        </button>
      </div>

      {/* Restroom Details */}
      <div
        style={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center"
        }}
      >
        <h3 style={{ fontWeight: "bold" }}>{data.name}</h3>
      </div>
      <p>
        <strong>‡∏ä‡∏±‡πâ‡∏ô:</strong> {data.floor}
      </p>
      <div>
        <strong>Rating:</strong> {data.rating} ‚≠ê
      </div>
      <br />

      {/* Features */}
      <div>
        <strong>Features:</strong>
        <ul>
          <li
            style={{
              display: "flex",
              justifyContent: "space-between",
              width: "100%"
            }}
          >
            Women's restroom{" "}
            <span style={{ marginLeft: "10px" }}>
              {features.women ? "‚úî" : "‚úò"}
            </span>
          </li>
          <li
            style={{
              display: "flex",
              justifyContent: "space-between",
              width: "100%"
            }}
          >
            Men's restroom{" "}
            <span style={{ marginLeft: "10px" }}>
              {features.men ? "‚úî" : "‚úò"}
            </span>
          </li>
          <li
            style={{
              display: "flex",
              justifyContent: "space-between",
              width: "100%"
            }}
          >
            Accessible restroom{" "}
            <span style={{ marginLeft: "10px" }}>
              {features.accessible ? "‚úî" : "‚úò"}
            </span>
          </li>
          <li
            style={{
              display: "flex",
              justifyContent: "space-between",
              width: "100%"
            }}
          >
            Bidet{" "}
            <span style={{ marginLeft: "10px" }}>
              {features.bidet ? "‚úî" : "‚úò"}
            </span>
          </li>
          <li
            style={{
              display: "flex",
              justifyContent: "space-between",
              width: "100%"
            }}
          >
            Tissue available{" "}
            <span style={{ marginLeft: "10px" }}>
              {features.tissue ? "‚úî" : "‚úò"}
            </span>
          </li>
          <li
            style={{
              display: "flex",
              justifyContent: "space-between",
              width: "100%"
            }}
          >
            Free to use{" "}
            <span style={{ marginLeft: "10px" }}>
              {features.free ? "‚úî" : "‚úò"}
            </span>
          </li>
        </ul>
      </div>
      <br />

      {/* Opening Hours */}
      <div>
        <strong>Opening Hours:</strong>
        <ul>
          {Object.keys(hours).map((day) => (
            <li
              key={day}
              style={{
                display: "flex",
                justifyContent: "space-between",
                width: "100%"
              }}
            >
              <span>{day.charAt(0).toUpperCase() + day.slice(1)}:</span>
              <span style={{ marginLeft: "10px" }}>{hours[day]}</span>
            </li>
          ))}
        </ul>
      </div>

      {/* Images */}
      <div style={{ marginTop: "20px" }}>
        <strong>Images:</strong>
        {Array.isArray(data.imageUrls) && data.imageUrls.length > 0 ? (
          <Slider {...settings}>
            {data.imageUrls.map((image, index) => (
              <div
                key={index}
                style={{
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center"
                }}
              >
                <DriveImage
                  driveId={extractDriveId(image)}
                  index={index}
                  fallbackUrl={NO_IMAGE_URL}
                />
              </div>
            ))}
          </Slider>
        ) : (
          <p>No images available.</p>
        )}
      </div>

      {/* Rating Section */}
      <div style={{ marginTop: "20px" }}>
        <strong>Rating</strong>
        <div style={{ display: "flex", fontSize: "24px", cursor: "pointer" }}>
          {[1, 2, 3, 4, 5].map((star) => (
            <span
              key={star}
              onClick={() => handleRatingClick(star)}
              style={{
                color: star <= rating ? "#FFD700" : "#ccc",
                marginRight: "5px"
              }}
            >
              ‚òÖ
            </span>
          ))}
        </div>
      </div>

      {/* Comment Text Area */}
      <textarea
        value={comment}
        onChange={(e) => setComment(e.target.value)}
        placeholder="‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì..."
        style={{
          width: "100%",
          height: "80px",
          marginTop: "10px",
          padding: "10px",
          borderRadius: "5px",
          border: "1px solid #ccc"
        }}
      />

      {/* Image Upload Section - NEW */}
      <div style={{ marginTop: "10px", marginBottom: "10px" }}>
        <input
          type="file"
          accept="image/*"
          onChange={handleImageChange}
          style={{ display: "none" }}
          ref={fileInputRef}
        />

        <div
          style={{
            display: "flex",
            justifyContent: "space-between",
            gap: "10px"
          }}
        >
          <button
            onClick={handleImageButtonClick}
            style={{
              padding: "8px 15px",
              backgroundColor: "#f0f0f0",
              color: "#333",
              border: "1px solid #ccc",
              borderRadius: "5px",
              display: "flex",
              alignItems: "center",
              gap: "5px"
            }}
          >
            üì∑ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
          </button>

          {imagePreview && (
            <button
              onClick={handleClearImage}
              style={{
                padding: "8px 15px",
                backgroundColor: "#fff0f0",
                color: "#d9534f",
                border: "1px solid #d9534f",
                borderRadius: "5px"
              }}
            >
              ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </button>
          )}
        </div>

        {/* Image Preview */}
        {imagePreview && (
          <div style={{ marginTop: "10px", position: "relative" }}>
            <img
              src={imagePreview}
              alt="Preview"
              style={{
                width: "100%",
                maxHeight: "200px",
                objectFit: "contain",
                borderRadius: "5px",
                border: "1px solid #ddd"
              }}
            />
          </div>
        )}
      </div>

      {/* Submit Button */}
      <button
        onClick={handleCommentSubmit}
        disabled={isSubmitting}
        style={{
          marginTop: "10px",
          padding: "10px",
          backgroundColor: isSubmitting ? "#a0c1b0" : "#006642",
          color: "white",
          border: "none",
          borderRadius: "5px",
          width: "100%",
          cursor: isSubmitting ? "wait" : "pointer"
        }}
      >
        {isSubmitting ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "Submit"}
      </button>

      {/* Comments Section */}
      <div style={{ marginTop: "20px" }}>
        <strong>Comment</strong>
        {comments.map((c, index) => (
          <div
            key={index}
            style={{
              marginTop: "10px",
              borderBottom: "1px solid #ccc",
              paddingBottom: "5px"
            }}
          >
            <strong>{c.username}</strong>
            <div style={{ color: "#FFD700", fontSize: "16px" }}>
              {"‚òÖ".repeat(c.rating) + "‚òÜ".repeat(5 - c.rating)}
            </div>
            <p>{c.text}</p>

            {/* ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô - NEW */}
            {c.image && (
              <div style={{ marginTop: "5px", marginBottom: "5px" }}>
                <img
                  src={c.image}
                  alt="Comment image"
                  style={{
                    maxWidth: "100%",
                    maxHeight: "200px",
                    borderRadius: "5px",
                    cursor: "pointer"
                  }}
                  onClick={() => {
                    // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
                    window.open(c.image, "_blank")
                  }}
                />
              </div>
            )}

            <span style={{ fontSize: "12px", color: "gray" }}>{c.date}</span>
          </div>
        ))}
      </div>
    </div>
  )
}

function MyReviewsPage({ onClose, username, commentsByLocation }) {
  const [userReviews, setUserReviews] = useState([])
  const [isLoading, setIsLoading] = useState(true)

  // Function to fetch user's reviews from the API
  useEffect(() => {
    const fetchUserReviews = async () => {
      setIsLoading(true)
      try {
        // Get user ID from localStorage
        const storedUser = localStorage.getItem("user")
        if (!storedUser) {
          setUserReviews([])
          setIsLoading(false)
          return
        }

        const user = JSON.parse(storedUser)
        const userId = user.user_id

        // Fetch user's reviews from API
        const response = await fetch(`${API_URL}/reviews/user/${userId}`)
        if (!response.ok) {
          throw new Error(`API responded with status: ${response.status}`)
        }

        const reviewData = await response.json()
        console.log("üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", reviewData)

        // Format the reviews for display
        const formattedReviews = reviewData.map((item) => ({
          id: item.review_id,
          location: item.building_name,
          floor: item.floor || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          rating: item.rating,
          comment: item.comment,
          date: item.review_date
            ? formatDate(item.review_date)
            : item.created_at
              ? formatDate(item.created_at)
              : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
          // ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
          rawDate: item.review_date || item.created_at || new Date(0),
          imageUrl: item.photo_url || null
        }));

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î
        formattedReviews.sort((a, b) => {
          // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Date object ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
          const dateA = new Date(a.rawDate);
          const dateB = new Date(b.rawDate);
          return dateB - dateA; // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤ (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏™‡∏∏‡∏î)
        });

        setUserReviews(formattedReviews);
      } catch (error) {
        console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß:", error)

        // Fallback: Filter reviews from existing commentsByLocation data
        console.log("üî∂ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å commentsByLocation");
        const allUserReviews = [];

        Object.entries(commentsByLocation).forEach(([location, comments]) => {
          comments.forEach((comment) => {
            if (comment.username === username) {
              // ‡πÅ‡∏¢‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô Date object
              let rawDate;
              try {
                // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢ (‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ) ‡πÄ‡∏õ‡πá‡∏ô Date object
                const parts = comment.date.split('/');
                if (parts.length === 3) {
                  // format: dd/mm/yyyy (‡∏õ‡∏µ‡πÑ‡∏ó‡∏¢)
                  rawDate = new Date(parseInt(parts[2]) - 543, parseInt(parts[1]) - 1, parseInt(parts[0]));
                } else {
                  rawDate = new Date(); // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                }
              } catch (e) {
                rawDate = new Date(); // ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
              }

              allUserReviews.push({
                location: location,
                floor: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                rating: comment.rating,
                comment: comment.text,
                date: comment.date,
                rawDate: rawDate, // ‡πÄ‡∏Å‡πá‡∏ö Date object ‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
                imageUrl: comment.image || null
              });
            }
          });
        });

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î
        allUserReviews.sort((a, b) => b.rawDate - a.rawDate);

        setUserReviews(allUserReviews);
      } finally {
        setIsLoading(false)
      }
    }

    fetchUserReviews()
  }, [username, commentsByLocation])

  return (
    <div
      style={{
        position: "fixed",
        top: "60px",
        left: 0,
        width: "100%",
        height: "calc(100vh - 60px)",
        backgroundColor: "white",
        zIndex: 1001,
        padding: "20px",
        overflowY: "auto"
      }}
    >
      <div
        style={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          marginBottom: "20px"
        }}
      >
        <h2
          style={{
            fontSize: "24px",
            fontWeight: "bold",
            margin: 0
          }}
        >
          ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô
        </h2>
        <button
          onClick={onClose}
          style={{
            background: "none",
            border: "none",
            fontSize: "24px",
            cursor: "pointer"
          }}
        >
          ‚úñ
        </button>
      </div>

      {isLoading ? (
        <div style={{ textAlign: "center", padding: "40px 0" }}>
          <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
        </div>
      ) : userReviews.length === 0 ? (
        <div
          style={{
            textAlign: "center",
            padding: "40px 0",
            color: "#666"
          }}
        >
          <p>‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß</p>
          <p>‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà</p>
        </div>
      ) : (
        <div>
          {userReviews.map((review, index) => (
            <div
              key={index}
              style={{
                marginBottom: "20px",
                padding: "15px",
                borderRadius: "10px",
                boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
                backgroundColor: "#f9f9f9"
              }}
            >
              <div
                style={{
                  display: "flex",
                  justifyContent: "space-between",
                  marginBottom: "5px"
                }}
              >
                <h3
                  style={{
                    fontSize: "18px",
                    fontWeight: "bold",
                    margin: 0
                  }}
                >
                  {review.location}
                </h3>
                <span
                  style={{
                    fontSize: "14px",
                    color: "#666"
                  }}
                >
                  {review.date}
                </span>
              </div>
              <p
                style={{
                  margin: "5px 0",
                  fontSize: "14px",
                  color: "#666"
                }}
              >
                ‡∏ä‡∏±‡πâ‡∏ô: {review.floor}
              </p>

              <div
                style={{
                  color: "#FFD700",
                  fontSize: "16px",
                  margin: "8px 0"
                }}
              >
                {"‚òÖ".repeat(review.rating) + "‚òÜ".repeat(5 - review.rating)}
              </div>

              <p
                style={{
                  margin: "10px 0",
                  fontSize: "16px"
                }}
              >
                {review.comment}
              </p>

              {review.imageUrl && (
                <div style={{ marginTop: "10px" }}>
                  <img
                    src={review.imageUrl}
                    alt="‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß"
                    style={{
                      maxWidth: "100%",
                      maxHeight: "200px",
                      borderRadius: "8px",
                      objectFit: "contain"
                    }}
                    onClick={() => window.open(review.imageUrl, "_blank")}
                  />
                </div>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  )
}

function UserProfile({
  username,
  handleLogout,
  setShowUserProfile,
  mapRef,
  userPosition,
  commentsByLocation
}) {
  console.log("üîπ DEBUG - UserProfile component rendered")
  const [showMyReviews, setShowMyReviews] = useState(false)
  const [showAdminPanel, setShowAdminPanel] = useState(false)
  const [isAdmin, setIsAdmin] = useState(false)
  const [displayName, setDisplayName] = useState(username || "")

  useEffect(() => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å props ‡∏Å‡πà‡∏≠‡∏ô
    if (username) {
      setDisplayName(username)
      return
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ username ‡∏à‡∏≤‡∏Å props ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å localStorage
    const storedUser = localStorage.getItem("user")
    if (storedUser) {
      try {
        const parsedUser = JSON.parse(storedUser)
        const fullName = `${parsedUser.first_name || ""} ${parsedUser.last_name || ""
          }`.trim()
        if (fullName) {
          setDisplayName(fullName)
          console.log("üîπ ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å localStorage ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", fullName)
        }
      } catch (error) {
        console.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:", error)
      }
    }
  }, [username])

  // Check if current user is admin
  useEffect(() => {
    const checkIfAdmin = () => {
      const storedUser = localStorage.getItem("user")
      if (storedUser) {
        try {
          const user = JSON.parse(storedUser)
          // Check if user has admin email
          if (user.email === "admkutoilet@gmail.com") {
            setIsAdmin(true)
            console.log("üîπ Admin user detected")
          } else {
            setIsAdmin(false)
          }
        } catch (error) {
          console.error("‚ùå Error checking admin status:", error)
          setIsAdmin(false)
        }
      }
    }

    checkIfAdmin()
  }, [])

  // Function to handle "Find a toilet" button click
  const handleFindToiletClick = () => {
    console.log("üîπ Find a toilet button clicked")
    // Close the profile view
    setShowUserProfile(false)

    // Center the map on the KU campus area with a good zoom level to show markers
    if (mapRef && mapRef.current) {
      const map = mapRef.current
      // Center on KU campus with appropriate zoom level
      map.setView([13.84599, 100.571218], 15, { animate: true })
      console.log("üîπ Map centered on KU campus")
    } else {
      console.warn("‚ùå Map reference not available")
    }
  }

  // Function to handle "Near Me" button click
  const handleNearMeClick = () => {
    console.log("üîπ Near Me button clicked")
    // Close the profile view
    setShowUserProfile(false)

    // Center the map on the user's current position
    if (mapRef && mapRef.current && userPosition) {
      const map = mapRef.current
      // Center on user's position with high zoom level (18)
      map.setView(userPosition, 18, { animate: true })
      map.invalidateSize() // Fix map rendering issues
      console.log("üîπ Map centered on user's position:", userPosition)
    } else {
      // If position is not available, show alert
      alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á")
      console.warn("‚ùå User position not available")
    }
  }

  // Function to handle "My review" button click
  const handleMyReviewClick = () => {
    console.log("üîπ My review button clicked")
    setShowMyReviews(true)
  }

  // Function to handle "Admin Panel" button click
  const handleAdminPanelClick = () => {
    console.log("üîπ Admin panel button clicked")
    setShowAdminPanel(true)
  }

  return (
    <>
      <div
        style={{
          position: "fixed",
          top: "60px",
          left: 0,
          width: "100%",
          backgroundColor: "white",
          padding: "20px",
          textAlign: "center",
          zIndex: 1001,
          boxShadow: "0px 2px 10px rgba(0, 0, 0, 0.1)",
          borderRadius: "0 0 10px 10px",
          height: "calc(100vh - 60px)",
          overflowY: "auto"
        }}
      >
        <h1 style={{ fontSize: "30px", fontWeight: "bold", marginTop: "30px" }}>
          Hello, {displayName || "Guest"}
        </h1>
        <p style={{ fontSize: "16px", color: "#555", marginTop: "10px" }}>
          Have a nice day :)
        </p>

        {/* Admin badge for admin users */}
        {isAdmin && (
          <div
            style={{
              backgroundColor: "#006642",
              color: "white",
              padding: "5px 15px",
              borderRadius: "20px",
              display: "inline-block",
              marginTop: "10px",
              fontSize: "14px",
              fontWeight: "bold"
            }}
          >
            Admin
          </div>
        )}

        <div
          style={{
            display: "flex",
            flexDirection: "column",
            gap: "15px",
            alignItems: "center",
            marginTop: "40px"
          }}
        >
          {/* Find a toilet button */}
          <button
            onClick={handleFindToiletClick}
            style={profileButtonStyle}
          >
            Find a toilet
          </button>

          {/* Near Me button with click handler */}
          <button
            onClick={handleNearMeClick}
            style={profileButtonStyle}
          >
            Near Me
          </button>

          {/* My review button with click handler */}
          <button
            onClick={handleMyReviewClick}
            style={profileButtonStyle}
          >
            My Reviews
          </button>

          {/* Admin Panel button - only visible for admin users */}
          {isAdmin && (
            <button
              onClick={handleAdminPanelClick}
              style={{
                ...profileButtonStyle,
                backgroundColor: "#006642",
                color: "white",
                border: "none"
              }}
            >
              Admin Panel
            </button>
          )}
        </div>

        <button
          onClick={handleLogout}
          style={{
            fontWeight: "bold",
            padding: "15px 40px",
            backgroundColor: "#006642",
            color: "#fff",
            border: "none",
            borderRadius: "25px",
            width: "80%",
            marginTop: "40px"
          }}
        >
          Logout
        </button>
      </div>

      {/* My Reviews Page */}
      {showMyReviews && (
        <MyReviewsPage
          onClose={() => setShowMyReviews(false)}
          username={username}
          commentsByLocation={commentsByLocation}
        />
      )}

      {/* Admin Panel */}
      {showAdminPanel && isAdmin && (
        <AdminPanel onClose={() => setShowAdminPanel(false)} />
      )}
    </>
  )
}

function AdminPanel({ onClose }) {
  const [allReviews, setAllReviews] = useState([])
  const [isLoading, setIsLoading] = useState(true)
  const [filter, setFilter] = useState("")
  const [selectedLocation, setSelectedLocation] = useState("all")
  const [locations, setLocations] = useState([])
  const [deleteConfirmation, setDeleteConfirmation] = useState(null)
  const [deletingReviewId, setDeletingReviewId] = useState(null)

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

  // Fetch all reviews when component mounts
  useEffect(() => {
    console.log("üîπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô...")
    fetchAllReviews()
  }, [])

  const fetchAllReviews = async () => {
    setIsLoading(true)
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å localStorage
      const storedUser = localStorage.getItem("user")
      if (!storedUser) {
        setAllReviews([])
        setIsLoading(false)
        alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ")
        return
      }

      const user = JSON.parse(storedUser)

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏à‡∏≤‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•)
      if (user.email !== "admkutoilet@gmail.com") {
        alert("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ")
        setIsLoading(false)
        return
      }

      // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡πÉ‡∏ô query params ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
      const response = await fetch(
        `${API_URL}/admin/reviews?email=${encodeURIComponent(user.email)}`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            "X-User-Email": user.email // ‡πÄ‡∏û‡∏¥‡πà‡∏° header ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
          }
        }
      )

      if (!response.ok) {
        throw new Error(`API responded with status: ${response.status}`)
      }

      const data = await response.json()
      console.log("üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", data)

      // Extract unique locations
      const uniqueLocations = [
        ...new Set(data.map((item) => item.building_name))
      ]
      setLocations(["all", ...uniqueLocations])

      // Format reviews for display
      const formattedReviews = data.map((item) => ({
        id: item.review_id,
        userId: item.user_id,
        userName: `${item.first_name} ${item.last_name}`,
        userEmail: item.email,
        location: item.building_name,
        floor: item.floor || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
        rating: item.rating,
        comment: item.comment,
        date: item.review_date
          ? formatDate(item.review_date)
          : item.created_at
            ? formatDate(item.created_at)
            : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
        imageUrl: item.photo_url || null
      }))

      setAllReviews(formattedReviews)
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß:", error)
      alert(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÑ‡∏î‡πâ: ${error.message}`)
    } finally {
      setIsLoading(false)
    }
  }

  // Filter reviews based on search term and selected location
  const filteredReviews = allReviews.filter((review) => {
    const matchesSearch =
      review.comment.toLowerCase().includes(filter.toLowerCase()) ||
      review.userName.toLowerCase().includes(filter.toLowerCase()) ||
      review.userEmail.toLowerCase().includes(filter.toLowerCase()) ||
      review.location.toLowerCase().includes(filter.toLowerCase())

    const matchesLocation =
      selectedLocation === "all" || review.location === selectedLocation

    return matchesSearch && matchesLocation
  })

  // Handle review deletion
  const handleDeleteReview = async (reviewId) => {
    setDeletingReviewId(reviewId)

    try {
      const storedUser = localStorage.getItem("user")
      if (!storedUser) {
        alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ")
        setDeleteConfirmation(null)
        return
      }

      const user = JSON.parse(storedUser)

      // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏õ‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô URL ‡πÅ‡∏•‡∏∞ Header
      const response = await fetch(
        `${API_URL}/admin/reviews/${reviewId}?email=${encodeURIComponent(
          user.email
        )}`,
        {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json",
            "X-User-Email": user.email
          }
        }
      )

      if (!response.ok) {
        throw new Error(`Server responded with status: ${response.status}`)
      }

      // Remove the deleted review from the state
      setAllReviews((prevReviews) =>
        prevReviews.filter((review) => review.id !== reviewId)
      )
      alert("‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
      setDeleteConfirmation(null)
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß:", error)
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    } finally {
      setDeletingReviewId(null)
    }
  }

  return (
    <div
      style={{
        position: "fixed",
        top: "60px",
        left: 0,
        width: "100%",
        height: "calc(100vh - 60px)",
        backgroundColor: "white",
        zIndex: 1001,
        padding: "20px",
        overflowY: "auto"
      }}
    >
      {/* Header with title and close button */}
      <div
        style={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          marginBottom: "20px"
        }}
      >
        <h2
          style={{
            fontSize: "24px",
            fontWeight: "bold",
            margin: 0,
            color: "#006642"
          }}
        >
          ‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö
        </h2>
        <button
          onClick={onClose}
          style={{
            background: "none",
            border: "none",
            fontSize: "24px",
            cursor: "pointer"
          }}
        >
          ‚úñ
        </button>
      </div>

      {/* Filters */}
      <div
        style={{
          display: "flex",
          marginBottom: "20px",
          gap: "10px",
          flexWrap: "wrap"
        }}
      >
        <input
          type="text"
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏µ‡∏ß‡∏¥‡∏ß..."
          value={filter}
          onChange={(e) => setFilter(e.target.value)}
          style={{
            padding: "10px",
            borderRadius: "5px",
            border: "1px solid #ccc",
            flex: "1",
            minWidth: "200px"
          }}
        />

        <select
          value={selectedLocation}
          onChange={(e) => setSelectedLocation(e.target.value)}
          style={{
            padding: "10px",
            borderRadius: "5px",
            border: "1px solid #ccc",
            minWidth: "150px"
          }}
        >
          {locations.map((location, index) => (
            <option
              key={index}
              value={location}
            >
              {location === "all" ? "‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà" : location}
            </option>
          ))}
        </select>

        <button
          onClick={fetchAllReviews}
          style={{
            padding: "10px",
            backgroundColor: "#006642",
            color: "white",
            border: "none",
            borderRadius: "5px",
            cursor: "pointer"
          }}
        >
          ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
        </button>
      </div>

      {/* Status Information */}
      <div style={{ marginBottom: "20px" }}>
        <p>
          ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {allReviews.length} | ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á:{" "}
          {filteredReviews.length}
        </p>
      </div>

      {/* Loading State */}
      {isLoading ? (
        <div style={{ textAlign: "center", padding: "40px 0" }}>
          <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
        </div>
      ) : filteredReviews.length === 0 ? (
        <div
          style={{
            textAlign: "center",
            padding: "40px 0",
            color: "#666"
          }}
        >
          <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç</p>
        </div>
      ) : (
        <div>
          {/* Reviews List */}
          {filteredReviews.map((review) => (
            <div
              key={review.id}
              style={{
                marginBottom: "20px",
                padding: "15px",
                borderRadius: "10px",
                boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
                backgroundColor: "#f9f9f9",
                position: "relative"
              }}
            >
              {/* Delete Button */}
              <button
                onClick={() => setDeleteConfirmation(review.id)}
                style={{
                  position: "absolute",
                  top: "10px",
                  right: "10px",
                  background: "none",
                  border: "none",
                  color: "#d9534f",
                  cursor: "pointer",
                  fontSize: "20px"
                }}
                title="‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ô‡∏µ‡πâ"
              >
                üóëÔ∏è
              </button>

              {/* User Info */}
              <div
                style={{
                  display: "flex",
                  justifyContent: "space-between",
                  marginBottom: "5px",
                  flexWrap: "wrap"
                }}
              >
                <div>
                  <h3
                    style={{
                      fontSize: "18px",
                      fontWeight: "bold",
                      margin: 0
                    }}
                  >
                    {review.userName}
                  </h3>
                  <p
                    style={{
                      margin: "2px 0 0 0",
                      fontSize: "14px",
                      color: "#666"
                    }}
                  >
                    {review.userEmail}
                  </p>
                </div>
                <span
                  style={{
                    fontSize: "14px",
                    color: "#666",
                    marginRight: "30px"
                  }}
                >
                  {review.date}
                </span>
              </div>

              {/* Location Info */}
              <div
                style={{
                  backgroundColor: "#e8f4ea",
                  padding: "5px 10px",
                  borderRadius: "5px",
                  display: "inline-block",
                  margin: "10px 0"
                }}
              >
                <strong>{review.location}</strong>
                <span> | ‡∏ä‡∏±‡πâ‡∏ô: {review.floor}</span>
              </div>

              {/* Rating */}
              <div
                style={{
                  color: "#FFD700",
                  fontSize: "16px",
                  margin: "8px 0"
                }}
              >
                {"‚òÖ".repeat(review.rating) + "‚òÜ".repeat(5 - review.rating)}
              </div>

              {/* Comment */}
              <p
                style={{
                  margin: "10px 0",
                  fontSize: "16px",
                  backgroundColor: "#fff",
                  padding: "10px",
                  borderRadius: "5px",
                  border: "1px solid #eee"
                }}
              >
                {review.comment}
              </p>

              {/* Review Image */}
              {review.imageUrl && (
                <div style={{ marginTop: "10px" }}>
                  <img
                    src={review.imageUrl}
                    alt="‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß"
                    style={{
                      maxWidth: "100%",
                      maxHeight: "200px",
                      borderRadius: "8px",
                      objectFit: "contain",
                      border: "1px solid #ddd"
                    }}
                    onClick={() => window.open(review.imageUrl, "_blank")}
                  />
                </div>
              )}

              {/* Delete Confirmation Modal */}
              {deleteConfirmation === review.id && (
                <div
                  style={{
                    position: "absolute",
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                    backgroundColor: "rgba(255, 255, 255, 0.9)",
                    display: "flex",
                    flexDirection: "column",
                    justifyContent: "center",
                    alignItems: "center",
                    borderRadius: "10px",
                    zIndex: 2
                  }}
                >
                  <p
                    style={{
                      fontSize: "16px",
                      fontWeight: "bold",
                      textAlign: "center",
                      margin: "10px 0"
                    }}
                  >
                    ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ô‡∏µ‡πâ?
                  </p>
                  <div
                    style={{
                      display: "flex",
                      gap: "10px",
                      marginTop: "10px"
                    }}
                  >
                    <button
                      onClick={() => setDeleteConfirmation(null)}
                      style={{
                        padding: "8px 15px",
                        backgroundColor: "#f0f0f0",
                        border: "none",
                        borderRadius: "5px",
                        cursor: "pointer"
                      }}
                      disabled={deletingReviewId === review.id}
                    >
                      ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                    </button>
                    <button
                      onClick={() => handleDeleteReview(review.id)}
                      style={{
                        padding: "8px 15px",
                        backgroundColor: "#d9534f",
                        color: "white",
                        border: "none",
                        borderRadius: "5px",
                        cursor: "pointer"
                      }}
                      disabled={deletingReviewId === review.id}
                    >
                      {deletingReviewId === review.id ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö..." : "‡∏•‡∏ö"}
                    </button>
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  )
}

function App() {
  const [loggedIn, setLoggedIn] = useState(false)
  const [username, setUsername] = useState("")
  const [showSignUp, setShowSignUp] = useState(false)
  const [showLogin, setShowLogin] = useState(false)
  const [selectedMarker, setSelectedMarker] = useState(null)
  const [showUserProfile, setShowUserProfile] = useState(false)
  const [showFilter, setShowFilter] = useState(false)
  const [commentsByLocation, setCommentsByLocation] = useState({})
  const [userPosition, setUserPosition] = useState(null)
  const [searchText, setSearchText] = useState("")
  const [user, setUser] = useState(null)
  const [showProfile, setShowProfile] = useState(false)
  const [filteredRestrooms, setFilteredRestrooms] = useState([])
  const [restrooms, setRestrooms] = useState([])
  const mapRef = useRef(null)

  const [filters, setFilters] = useState({
    women: false,
    men: false,
    accessible: false,
    bidet: false,
    tissue: false,
    free: false
  })

  const applyFilters = () => {
    const filtered = restrooms.filter((restroom) => {
      const matchesSearch =
        !searchText ||
        restroom.name.toLowerCase().includes(searchText.toLowerCase())

      return (
        matchesSearch &&
        (!filters.women || restroom.features.women) &&
        (!filters.men || restroom.features.men) &&
        (!filters.accessible || restroom.features.accessible) &&
        (!filters.bidet || restroom.features.bidet) &&
        (!filters.tissue || restroom.features.tissue) &&
        (!filters.free || restroom.features.free)
      )
    })

    console.log("üîπ Filtered Restrooms:", filtered)
    setFilteredRestrooms(filtered)
  }

  useEffect(() => {
    applyFilters()
  }, [searchText, filters, restrooms])

  useEffect(() => {
    setFilteredRestrooms(restrooms) // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
  }, [restrooms])

  const NO_IMAGE_URL = require("./img/logo.png")

  const MapController = () => {
    const map = useMap()

    // Store the map reference when the component mounts
    useEffect(() => {
      mapRef.current = map
      console.log("üîπ Map reference saved")
    }, [map])

    return null
  }

  const convertGoogleDriveThumbnail = (url) => {
    if (!url || typeof url !== "string") {
      console.warn("‚ùå Invalid URL provided:", url)
      return NO_IMAGE_URL
    }

    const googleDriveMatch = url.match(/\/d\/([a-zA-Z0-9_-]+)\//)
    if (googleDriveMatch) {
      return `https://drive.google.com/thumbnail?id=${googleDriveMatch[1]}&sz=w1000`
    }

    return url
  }

  const calculateAverageRating = (reviews) => {
    if (!reviews || reviews.length === 0) return 0

    let totalRating = 0
    let count = 0

    reviews.forEach((review) => {
      if (review.review && typeof review.review.rating === "number") {
        totalRating += review.review.rating
        count++
      }
    })

    return count > 0 ? (totalRating / count).toFixed(1) : 0
  }

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Backend ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Component ‡πÇ‡∏´‡∏•‡∏î
  useEffect(() => {
    console.log("üîπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏à‡∏≤‡∏Å API...")

    fetch(`${API_URL}/restrooms/details`)
      .then((res) => {
        if (!res.ok) {
          throw new Error(`API responded with status: ${res.status}`)
        }
        return res.json()
      })
      .then((data) => {
        console.log("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", data)

        const transformedData = data.map((item) => {
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
          const processedReviews = {}

          // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
          if (item.reviews && Array.isArray(item.reviews)) {
            item.reviews.forEach((review) => {
              // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
              let reviewImage = null

              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ review ‡∏°‡∏µ photos ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
              if (
                review.photos &&
                Array.isArray(review.photos) &&
                review.photos.length > 0
              ) {
                // ‡πÉ‡∏ä‡πâ URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏£‡∏Å
                reviewImage = convertGoogleDriveThumbnail(
                  review.photos[0].base64
                )
              }

              // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏≠‡∏û‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
              const formattedReview = {
                username:
                  review.review.first_name + " " + review.review.last_name,
                text: review.review.comment,
                rating: review.review.rating,
                date: review.review.review_date
                  ? new Date(review.review.review_date).toLocaleDateString("th-TH")
                  : new Date().toLocaleDateString("th-TH"),
                image: reviewImage
              }

              // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏ô‡∏µ‡πâ
              if (!processedReviews[item.restroom.building_name]) {
                processedReviews[item.restroom.building_name] = []
              }
              processedReviews[item.restroom.building_name].push(
                formattedReview
              )
            })
          }

          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡πÅ‡∏≠‡∏û
          if (Object.keys(processedReviews).length > 0) {
            setCommentsByLocation((prev) => ({
              ...prev,
              ...processedReviews
            }))
          }

          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏≠‡∏û‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
          return {
            id: item.restroom.restroom_id, // ‡πÄ‡∏û‡∏¥‡πà‡∏° ID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô
            geocode: [
              parseFloat(item.restroom.latitude),
              parseFloat(item.restroom.longitude)
            ],
            name: item.restroom.building_name,
            floor: item.restroom.floor,
            rating: calculateAverageRating(item.reviews), // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
            features: {
              women: item.restroom.is_women,
              men: item.restroom.is_men,
              accessible: item.restroom.is_accessible,
              bidet: item.restroom.is_bum_gun,
              tissue: item.restroom.is_toilet_paper,
              free: item.restroom.is_free
            },
            hours: {
              monday: item.restroom.opening_hours_monday || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
              tuesday: item.restroom.opening_hours_tuesday || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
              wednesday: item.restroom.opening_hours_wednesday || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
              thursday: item.restroom.opening_hours_thursday || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
              friday: item.restroom.opening_hours_friday || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
              saturday: item.restroom.opening_hours_saturday || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
              sunday: item.restroom.opening_hours_sunday || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
            },
            imageUrls: (item.restroom_photos || []).map((photo) =>
              convertGoogleDriveThumbnail(photo.base64)
            )
          }
        })

        setRestrooms(transformedData)
      })
      .catch((err) => console.error("‚ùå Error fetching restrooms:", err))
  }, [])

  useEffect(() => {
    const loadUserData = () => {
      const storedUser = localStorage.getItem("user")
      if (storedUser) {
        try {
          const parsedUser = JSON.parse(storedUser)
          setUser(parsedUser)

          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢)
          const firstName = parsedUser.first_name || ""
          const lastName = parsedUser.last_name || ""
          const fullName = `${firstName} ${lastName}`.trim()

          if (fullName) {
            setUsername(fullName)
            console.log("‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ", fullName)
          } else {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏ó‡∏ô
            setUsername(parsedUser.email || "Guest")
          }

          setLoggedIn(true)
        } catch (error) {
          console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:", error)
          localStorage.removeItem("user")
          setLoggedIn(false)
          setUser(null)
          setUsername("")
        }
      } else {
        console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô localStorage")
        setLoggedIn(false)
        setUser(null)
        setUsername("")
      }
    }

    loadUserData()
  }, [])

  const handleProfileClick = () => {
    console.log("üîπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå")

    // 1. ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Profile ‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if (showUserProfile) {
      console.log("üîπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå")
      setShowUserProfile(false)
      return
    }

    // 2. ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Login ‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if (showLogin) {
      console.log("üîπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô")
      setShowLogin(false)
      return
    }

    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
    if (loggedIn) {
      // ‡∏ñ‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
      console.log("üîπ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå")
      setShowUserProfile(true)
    } else {
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
      console.log("üîπ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô")
      setShowLogin(true)
    }
  }

  const handleFilterClick = () => {
    setShowFilter((prev) => !prev)
  }

  const handleRegisterClick = () => {
    setShowSignUp(true)
    setShowLogin(false)
  }

  const handleLoginClick = () => {
    setShowSignUp(false)
    setShowLogin(true)
  }

  const handleLogin = (usernameInput) => {
    console.log("üîπ User logged in:", usernameInput)
    setUsername(usernameInput)
    setLoggedIn(true)
    setShowLogin(false)
    setShowUserProfile(true) // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  }

  const handleLogout = () => {
    console.log("üîπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö")

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    localStorage.removeItem("user")
    setUser(null)
    setLoggedIn(false)

    // ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
    setShowUserProfile(false)

    // ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    setTimeout(() => {
      setShowLogin(true)
    }, 100) // ‡πÉ‡∏ä‡πâ setTimeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡πà‡∏≠‡∏ô
  }

  return (
    <GoogleOAuthProvider clientId="577202715001-pa9pfkmbm44haiocpbpg4ran1rn4f824.apps.googleusercontent.com">
      <div>
        <HeaderBar
          onFilterClick={() => setShowFilter(!showFilter)}
          onProfileClick={handleProfileClick}
          onSearchChange={(text) => {
            setSearchText(text)
            applyFilters()
          }}
          isLoggedIn={loggedIn}
        />

        {showUserProfile && (
          <UserProfile
            username={username}
            mapRef={mapRef}
            userPosition={userPosition}
            commentsByLocation={commentsByLocation}
            setShowUserProfile={setShowUserProfile}
            handleLogout={() => {
              console.log("üîπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå")
              localStorage.removeItem("user")
              setUser(null)
              setLoggedIn(false)
              setShowUserProfile(false)

              // ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
              setTimeout(() => {
                setShowLogin(true)
              }, 100)
            }}
          />
        )}

        {showLogin && (
          <LoginPage
            onClose={() => setShowLogin(false)}
            onRegisterClick={handleRegisterClick}
            onLogin={handleLogin}
          />
        )}

        {showSignUp && (
          <SignUpPage
            onClose={() => setShowSignUp(false)}
            onLoginClick={() => {
              setShowSignUp(false)
              setShowLogin(true)
            }}
          />
        )}

        <MapContainer
          style={{
            width: "100%",
            height: "100vh",
            marginTop: "60px",
            position: "relative"
          }}
          center={[13.84599, 100.571218]}
          zoom={13}
          scrollWheelZoom={true}
        >
          <TileLayer
            attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
          />
          <GPSMarker setUserPosition={setUserPosition} />
          <MarkerClusterGroup>
            {filteredRestrooms.map((marker, index) => (
              <Marker
                key={index}
                position={marker.geocode}
                icon={customIcon}
                eventHandlers={{
                  click: () => setSelectedMarker(marker)
                }}
              >
                <Popup>
                  <h3>{marker.name}</h3>
                  <p>‡∏ä‡∏±‡πâ‡∏ô: {marker.floor}</p>
                </Popup>
              </Marker>
            ))}
          </MarkerClusterGroup>

          {/* MapController to get reference to the map */}
          <MapController />

          <div
            style={{
              position: "absolute",
              bottom: "60px",
              right: "20px",
              zIndex: 1000
            }}
          >
            <ReCenterButton position={userPosition} />
          </div>
        </MapContainer>
        {selectedMarker && (
          <div
            style={{
              position: "fixed",
              bottom: 0,
              left: 0,
              width: "100%",
              backgroundColor: "white",
              padding: "20px",
              borderRadius: "20px 20px 0 0",
              boxShadow: "0px -2px 10px rgba(0, 0, 0, 0.1)"
            }}
          >
            <button
              onClick={() => setSelectedMarker(null)}
              style={{ float: "right" }}
            >
              ‚úñ
            </button>
            <h3>{selectedMarker.name}</h3>
            <p>‡∏ä‡∏±‡πâ‡∏ô: {selectedMarker.floor}</p>
            <strong>‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å:</strong>
            <ul>
              <li>‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ç‡∏¥‡∏á: {selectedMarker.features.women ? "‚úî" : "‚úò"}</li>
              <li>‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏ä‡∏≤‡∏¢: {selectedMarker.features.men ? "‚úî" : "‚úò"}</li>
              <li>
                ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏Å‡∏≤‡∏£: {selectedMarker.features.accessible ? "‚úî" : "‚úò"}
              </li>
              <li>‡∏™‡∏≤‡∏¢‡∏â‡∏µ‡∏î: {selectedMarker.features.bidet ? "‚úî" : "‚úò"}</li>
              <li>‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏ä‡∏≥‡∏£‡∏∞: {selectedMarker.features.tissue ? "‚úî" : "‚úò"}</li>
              <li>‡∏ü‡∏£‡∏µ: {selectedMarker.features.free ? "‚úî" : "‚úò"}</li>
            </ul>
            <strong>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£:</strong>
            <ul>
              <li>‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå: {selectedMarker.hours.monday}</li>
              <li>‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£: {selectedMarker.hours.tuesday}</li>
              <li>‡∏û‡∏∏‡∏ò: {selectedMarker.hours.wednesday}</li>
              <li>‡∏û‡∏§‡∏´‡∏±‡∏™: {selectedMarker.hours.thursday}</li>
              <li>‡∏®‡∏∏‡∏Å‡∏£‡πå: {selectedMarker.hours.friday}</li>
              <li>‡πÄ‡∏™‡∏≤‡∏£‡πå: {selectedMarker.hours.saturday}</li>
              <li>‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå: {selectedMarker.hours.sunday}</li>
            </ul>
            {selectedMarker.imageUrls.length > 0 && (
              <img
                src={selectedMarker.imageUrls[0]}
                alt="Toilet"
                style={{
                  width: "100%",
                  maxHeight: "200px",
                  objectFit: "cover",
                  marginTop: "10px"
                }}
              />
            )}
          </div>
        )}

        {showFilter && (
          <FilterPanel
            onClose={() => setShowFilter(false)}
            filters={filters}
            setFilters={setFilters}
            applyFilters={applyFilters}
          />
        )}
        <BottomSheet
          data={selectedMarker}
          onClose={() => setSelectedMarker(null)}
          loggedIn={loggedIn}
          setShowLogin={setShowLogin}
          username={username}
          commentsByLocation={commentsByLocation}
          setCommentsByLocation={setCommentsByLocation}
        />
      </div>
    </GoogleOAuthProvider>
  )
}

const profileButtonStyle = {
  fontWeight: "bold",
  padding: "15px 40px",
  backgroundColor: "#fff",
  color: "#006642",
  border: "2px solid #006642",
  borderRadius: "25px",
  width: "80%",
  cursor: "pointer"
}

export default App
